---
kind: pipeline
type: docker
name: python_3.6.2

platform:
  os: linux
  arch: amd64

steps:
- name: python
  image: python:3.6.2
  commands:
  - python3 -m pip install -U pip
  - python3 -m pip install poetry
  - poetry install
  - poetry run pytest test

---
kind: pipeline
type: docker
name: python_3.7

platform:
  os: linux
  arch: amd64

steps:
- name: python
  image: python:3.7
  commands:
  - python3 -m pip install -U pip
  - python3 -m pip install poetry
  - poetry install
  - poetry run pytest test

---
kind: pipeline
type: docker
name: python_3.8

platform:
  os: linux
  arch: amd64

steps:
- name: python
  image: python:3.8
  commands:
  - python3 -m pip install -U pip
  - python3 -m pip install poetry
  - poetry install
  - poetry run pytest test

---
kind: pipeline
type: docker
name: python_3.9

platform:
  os: linux
  arch: amd64

steps:
- name: python
  image: python:3.9
  commands:
  - python3 -m pip install -U pip
  - python3 -m pip install poetry
  - poetry install
  - poetry run pytest test

---
kind: pipeline
type: docker
name: sqlite

platform:
  os: linux
  arch: amd64

steps:
- name: data_check
  image: python:3.8
  commands:
  - python -m pip install -U pip
  - python -m pip install poetry
  - poetry install
  - bash -c 'while ! poetry run data_check --ping; do echo "waiting for db"; sleep 1; done'
  - poetry run pytest test/test_database.py test/test_data_check.py
  - poetry run data_check --generate checks/generated
  - poetry run data_check checks/basic checks/generated --traceback
  - bash -c 'if ! poetry run data_check checks/failing; then exit 0; else exit 1; fi'
  - poetry run data_check checks/pipelines/simple_pipeline --traceback --workers 1

---
kind: pipeline
type: docker
name: postgres

platform:
  os: linux
  arch: amd64

steps:
- name: data_check
  image: python:3.8
  commands:
  - python -m pip install -U pip
  - python -m pip install poetry
  - poetry install -E postgres
  - cd int_test/postgres
  - bash -c 'while ! poetry run data_check --ping; do echo "waiting for db"; sleep 1; done'
  - poetry run data_check --run-sql prepare
  - poetry run pytest ../../test/test_database.py ../../test/test_data_check.py
  - poetry run data_check --generate checks/generated
  - poetry run data_check checks/basic checks/generated --traceback
  - bash -c 'if ! poetry run data_check checks/failing; then exit 0; else exit 1; fi'
  - poetry run data_check checks/pipelines/simple_pipeline --traceback
  environment:
    POSTGRES_PASSWORD: data_check

services:
- name: db
  image: postgres:13
  environment:
    POSTGRES_PASSWORD: data_check

---
kind: pipeline
type: docker
name: mysql

platform:
  os: linux
  arch: amd64

steps:
- name: data_check
  image: python:3.8
  commands:
  - python -m pip install -U pip
  - python -m pip install poetry
  - poetry install -E mysql
  - cd int_test/mysql
  - bash -c 'while ! poetry run data_check --ping; do echo "waiting for db"; sleep 1; done'
  - poetry run data_check --run-sql prepare
  - poetry run pytest ../../test/test_database.py ../../test/test_data_check.py
  - poetry run data_check --generate checks/generated
  - poetry run data_check checks/basic checks/generated --traceback
  - bash -c 'if ! poetry run data_check checks/failing; then exit 0; else exit 1; fi'
  - poetry run data_check checks/pipelines/simple_pipeline --traceback
  environment:
    MYSQL_ROOT_PASSWORD: data_check

services:
- name: db
  image: mysql:8
  environment:
    MYSQL_ROOT_PASSWORD: data_check

---
kind: pipeline
type: docker
name: mssql

platform:
  os: linux
  arch: amd64

steps:
- name: data_check
  image: python:3.8
  commands:
  - curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
  - curl https://packages.microsoft.com/config/debian/10/prod.list > /etc/apt/sources.list.d/mssql-release.list
  - apt-get update
  - apt-get install -y unixodbc unixodbc-dev
  - ACCEPT_EULA=Y apt-get install -y msodbcsql17
  - python -m pip install -U pip
  - python -m pip install poetry
  - poetry install -E mssql
  - cd int_test/mssql
  - bash -c 'while ! poetry run data_check --ping; do echo "waiting for db"; sleep 1; done'
  - poetry run data_check --run-sql prepare
  - poetry run pytest ../../test/test_database.py ../../test/test_data_check.py
  - poetry run data_check --generate checks/generated
  - poetry run data_check checks/basic checks/generated --traceback
  - bash -c 'if ! poetry run data_check checks/failing; then exit 0; else exit 1; fi'
  - poetry run data_check checks/pipelines/simple_pipeline --traceback
  environment:
    ACCEPT_EULA: Y
    MSSQL_PID: Express
    SA_PASSWORD: data_CHECK

services:
- name: db
  image: mcr.microsoft.com/mssql/server:2019-latest
  environment:
    ACCEPT_EULA: Y
    MSSQL_PID: Express
    SA_PASSWORD: data_CHECK

---
kind: pipeline
type: docker
name: oracle

platform:
  os: linux
  arch: amd64

steps:
- name: data_check
  image: centos:7
  commands:
  - yum install -y wget  ncurses libnsl
  - yum-config-manager --add-repo https://yum.oracle.com/public-yum-ol7.repo
  - wget http://public-yum.oracle.com/RPM-GPG-KEY-oracle-ol7 -O /etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
  - yum install -y oracle-release-el7
  - mv /etc/yum.repos.d/oracle-ol7.repo.incomplete /etc/yum.repos.d/oracle-ol7.repo
  - yum install -y oracle-instantclient19.5-basic oracle-instantclient19.5-sqlplus python3
  - python3 -m pip install -U pip
  - centos 7 needs an older cryptography version
  - python3 -m pip install poetry cryptography==3.3.2
  - poetry install -E oracle
  - cd int_test/oracle
  - bash -c 'while ! poetry run data_check --ping; do echo "waiting for db"; sleep 1; done'
  - poetry run data_check --run-sql prepare
  - poetry run pytest ../../test/test_database.py ../../test/test_data_check.py
  - poetry run data_check --generate checks/generated
  - poetry run data_check checks/basic checks/generated --traceback
  - bash -c 'if ! poetry run data_check checks/failing; then exit 0; else exit 1; fi'
  - poetry run data_check checks/pipelines/simple_pipeline --traceback
  environment:
    CLIENT_HOME: /usr/lib/oracle/19.5/client64
    LANG: en_US.utf-8
    LC_ALL: en_US.utf-8
    LD_LIBRARY_PATH: $${LD_LIBRARY_PATH}:$${CLIENT_HOME}/lib
    NLS_LANG: .utf8
    ORACLE_PWD: data_check
    PATH: $${PATH}:$${CLIENT_HOME}/bin:/usr/local/bin

services:
- name: db
  image: oracle/database:18.4.0-xe
  settings:
    shm_size: 1gb
  environment:
    CLIENT_HOME: /usr/lib/oracle/19.5/client64
    LANG: en_US.utf-8
    LC_ALL: en_US.utf-8
    LD_LIBRARY_PATH: $${LD_LIBRARY_PATH}:$${CLIENT_HOME}/lib
    NLS_LANG: .utf8
    ORACLE_PWD: data_check
    PATH: $${PATH}:$${CLIENT_HOME}/bin:/usr/local/bin
  volumes:
  - name: oradata
    path: /opt/oracle/oradata

volumes:
- name: oradata
  host:
    path: /var/lib/oradata

...
