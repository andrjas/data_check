---
kind: pipeline
type: docker
name: oracle

platform:
  os: linux
  arch: amd64

steps:
- name: data_check
  pull: if-not-exists
  image: local/poetry_oracle
  commands:
  - cp -rn checks int_test/oracle
  - cp -rn load_data int_test/oracle
  - cp -rn run_sql int_test/oracle
  - cp -rn lookups int_test/oracle
  - poetry install -E oracle
  - cd int_test/oracle
  - bash -c 'while ! poetry run data_check --ping --quiet; do sleep 1; done'
  - poetry run data_check --sql-files prepare
  - poetry run pytest ../../test/database
  - poetry run data_check --generate checks/generated
  - poetry run data_check checks/basic checks/generated checks/empty_sets/basic checks/excel/basic --traceback
  - bash -c 'if ! poetry run data_check checks/failing; then exit 0; else exit 1; fi'
  - bash -c 'if ! poetry run data_check checks/empty_sets/failing; then exit 0; else exit 1; fi'
  - poetry run data_check checks/pipelines/simple_pipeline --traceback
  - poetry run data_check checks/pipelines/date_test --traceback --print
  - poetry run data_check checks/pipelines/leading_zeros --traceback --print
  environment:
    LANG: en_US.utf-8
    LC_ALL: en_US.utf-8
    NLS_LANG: .utf8
    ORACLE_PWD: data_check

services:
- name: db
  image: oracle/database:18.4.0-xe
  settings:
    shm_size: 1gb
  environment:
    LANG: en_US.utf-8
    LC_ALL: en_US.utf-8
    NLS_LANG: .utf8
    ORACLE_PWD: data_check
  volumes:
  - name: oradata
    path: /opt/oracle/oradata

volumes:
- name: oradata
  host:
    path: /var/lib/oradata

---
kind: pipeline
type: docker
name: python_3.6.2

platform:
  os: linux
  arch: amd64

steps:
- name: python
  image: local/poetry:3.6.2
  commands:
  - poetry install
  - poetry run pytest test int_test/cli
  - cd checks/basic
  - poetry run data_check

---
kind: pipeline
type: docker
name: sqlite

platform:
  os: linux
  arch: amd64

steps:
- name: data_check
  pull: if-not-exists
  image: local/poetry:3.8
  commands:
  - cp -rn checks int_test/sqlite
  - cp -rn load_data int_test/sqlite
  - cp -rn run_sql int_test/sqlite
  - cp -rn lookups int_test/sqlite
  - poetry install
  - cd int_test/sqlite
  - bash -c 'while ! poetry run data_check --ping --quiet; do sleep 1; done'
  - poetry run data_check --sql-files prepare
  - poetry run pytest ../../test/database
  - poetry run data_check --generate checks/generated
  - poetry run data_check checks/basic checks/generated checks/empty_sets/basic checks/excel/basic --traceback
  - bash -c 'if ! poetry run data_check checks/failing; then exit 0; else exit 1; fi'
  - bash -c 'if ! poetry run data_check checks/empty_sets/failing; then exit 0; else exit 1; fi'
  - poetry run data_check checks/pipelines/simple_pipeline --traceback
  - poetry run data_check checks/pipelines/date_test --traceback --print
  - poetry run data_check checks/pipelines/leading_zeros --traceback --print

---
kind: pipeline
type: docker
name: python_3.7

platform:
  os: linux
  arch: amd64

steps:
- name: python
  image: local/poetry:3.7
  commands:
  - poetry install
  - poetry run pytest test int_test/cli
  - cd checks/basic
  - poetry run data_check

---
kind: pipeline
type: docker
name: mysql

platform:
  os: linux
  arch: amd64

steps:
- name: data_check
  pull: if-not-exists
  image: local/poetry:3.8
  commands:
  - cp -rn checks int_test/mysql
  - cp -rn load_data int_test/mysql
  - cp -rn run_sql int_test/mysql
  - cp -rn lookups int_test/mysql
  - poetry install -E mysql
  - cd int_test/mysql
  - bash -c 'while ! poetry run data_check --ping --quiet; do sleep 1; done'
  - poetry run data_check --sql-files prepare
  - poetry run pytest ../../test/database
  - poetry run data_check --generate checks/generated
  - poetry run data_check checks/basic checks/generated checks/empty_sets/basic checks/excel/basic --traceback
  - bash -c 'if ! poetry run data_check checks/failing; then exit 0; else exit 1; fi'
  - bash -c 'if ! poetry run data_check checks/empty_sets/failing; then exit 0; else exit 1; fi'
  - poetry run data_check checks/pipelines/simple_pipeline --traceback
  - poetry run data_check checks/pipelines/date_test --traceback --print
  - poetry run data_check checks/pipelines/leading_zeros --traceback --print
  environment:
    MYSQL_ROOT_PASSWORD: data_check

services:
- name: db
  image: mysql:8
  environment:
    MYSQL_ROOT_PASSWORD: data_check

---
kind: pipeline
type: docker
name: python_3.8

platform:
  os: linux
  arch: amd64

steps:
- name: python
  image: local/poetry:3.8
  commands:
  - poetry install
  - poetry run pytest test int_test/cli
  - cd checks/basic
  - poetry run data_check

---
kind: pipeline
type: docker
name: postgres

platform:
  os: linux
  arch: amd64

steps:
- name: data_check
  pull: if-not-exists
  image: local/poetry:3.8
  commands:
  - cp -rn checks int_test/postgres
  - cp -rn load_data int_test/postgres
  - cp -rn run_sql int_test/postgres
  - cp -rn lookups int_test/postgres
  - poetry install -E postgres
  - cd int_test/postgres
  - bash -c 'while ! poetry run data_check --ping --quiet; do sleep 1; done'
  - poetry run data_check --sql-files prepare
  - poetry run pytest ../../test/database
  - poetry run data_check --generate checks/generated
  - poetry run data_check checks/basic checks/generated checks/empty_sets/basic checks/excel/basic --traceback
  - bash -c 'if ! poetry run data_check checks/failing; then exit 0; else exit 1; fi'
  - bash -c 'if ! poetry run data_check checks/empty_sets/failing; then exit 0; else exit 1; fi'
  - poetry run data_check checks/pipelines/simple_pipeline --traceback
  - poetry run data_check checks/pipelines/date_test --traceback --print
  - poetry run data_check checks/pipelines/leading_zeros --traceback --print
  environment:
    POSTGRES_PASSWORD: data_check

services:
- name: db
  image: postgres:13
  environment:
    POSTGRES_PASSWORD: data_check

---
kind: pipeline
type: docker
name: python_3.9

platform:
  os: linux
  arch: amd64

steps:
- name: python
  image: local/poetry:3.9
  commands:
  - poetry install
  - poetry run pytest test int_test/cli
  - cd checks/basic
  - poetry run data_check

---
kind: pipeline
type: docker
name: mssql

platform:
  os: linux
  arch: amd64

steps:
- name: data_check
  pull: if-not-exists
  image: local/poetry_mssql
  commands:
  - cp -rn checks int_test/mssql
  - cp -rn load_data int_test/mssql
  - cp -rn run_sql int_test/mssql
  - cp -rn lookups int_test/mssql
  - poetry install -E mssql
  - cd int_test/mssql
  - bash -c 'while ! poetry run data_check --ping --quiet; do sleep 1; done'
  - poetry run data_check --sql-files prepare
  - poetry run pytest ../../test/database
  - poetry run data_check --generate checks/generated
  - poetry run data_check checks/basic checks/generated checks/empty_sets/basic checks/excel/basic --traceback
  - bash -c 'if ! poetry run data_check checks/failing; then exit 0; else exit 1; fi'
  - bash -c 'if ! poetry run data_check checks/empty_sets/failing; then exit 0; else exit 1; fi'
  - poetry run data_check checks/pipelines/simple_pipeline --traceback
  - poetry run data_check checks/pipelines/date_test --traceback --print
  - poetry run data_check checks/pipelines/leading_zeros --traceback --print
  environment:
    ACCEPT_EULA: Y
    MSSQL_PID: Express
    SA_PASSWORD: data_CHECK

services:
- name: db
  image: mcr.microsoft.com/mssql/server:2019-latest
  environment:
    ACCEPT_EULA: Y
    MSSQL_PID: Express
    SA_PASSWORD: data_CHECK

...
