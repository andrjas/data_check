---
kind: pipeline
name: oracle
platform:
  arch: arm64
  os: linux
steps:
- commands:
  - dnf module install -y python39
  - alternatives --set python3 /usr/bin/python3.9
  - alternatives --set python /usr/bin/python3.9
  - dnf install -y python39-pip python39-devel oracle-release-el8 gcc libaio
  - dnf install -y oracle-instantclient19.10-basic
  - python3 -m pip install -U pip
  - python3 -m pip install poetry
  - cp -rn example/checks test/int_test/oracle
  - cp -rn example/load_data test/int_test/oracle
  - cp -rn example/run_sql test/int_test/oracle
  - cp -rn example/lookups test/int_test/oracle
  - cp -rn example/fake test/int_test/oracle
  - poetry install -E oracle
  - cd test/int_test/oracle
  - poetry run data_check ping --wait --timeout 60 --retry 5
  - rm -f checks/pipelines/fake_data/main.simple_fake_table.csv
  - rm -f checks/pipelines/fake_data/main.simple_fake_table_2.csv
  - rm -f checks/generated/data_with_hash.csv
  - rm -f test.db
  - poetry run data_check sql --workers 1 --files prepare
  - poetry run pytest ../test_int_tests.py
  - poetry run pytest ../../../test/database
  environment:
    DB_CONNECTION:
      from_secret: ORACLE_CONNECTION
    DB_PASSWORD:
      from_secret: ORACLE_PASSWORD
    DB_USER:
      from_secret: ORACLE_USER
    LANG: en_US.utf-8
    LC_ALL: en_US.utf-8
    NLS_LANG: .utf8
    TNS_ADMIN: /app/network/admin
  image: oraclelinux:8
  name: data_check
  pull: if-not-exists
  volumes:
  - name: cache
    path: /root/.cache
  - name: pkg_cache
    path: /var/cache/dnf
  - name: wallet
    path: /app/network/admin
type: docker
volumes:
- host:
    path: /tmp/data_check_cache/oracle
  name: cache
- host:
    path: /tmp/data_check_cache/oracle_pkg
  name: pkg_cache
- host:
    path: /home/data_check/wallet
  name: wallet
---
kind: pipeline
name: sqlite
platform:
  arch: arm64
  os: linux
steps:
- commands:
  - python -m pip install -U pip
  - python -m pip install poetry
  - cp -rn example/checks test/int_test/sqlite
  - cp -rn example/load_data test/int_test/sqlite
  - cp -rn example/run_sql test/int_test/sqlite
  - cp -rn example/lookups test/int_test/sqlite
  - cp -rn example/fake test/int_test/sqlite
  - poetry install
  - cd test/int_test/sqlite
  - poetry run data_check ping --wait --timeout 60 --retry 5
  - rm -f checks/pipelines/fake_data/main.simple_fake_table.csv
  - rm -f checks/pipelines/fake_data/main.simple_fake_table_2.csv
  - rm -f checks/generated/data_with_hash.csv
  - rm -f test.db
  - poetry run data_check sql --workers 1 --files prepare
  - poetry run pytest ../test_int_tests.py
  - poetry run pytest ../../../test/database
  environment: {}
  image: python:3.8
  name: data_check
  pull: if-not-exists
  volumes:
  - name: cache
    path: /root/.cache
  - name: pkg_cache
    path: /var/cache/apt
type: docker
volumes:
- host:
    path: /tmp/data_check_cache/sqlite
  name: cache
- host:
    path: /tmp/data_check_cache/sqlite_pkg
  name: pkg_cache
---
kind: pipeline
name: mysql
platform:
  arch: arm64
  os: linux
steps:
- commands:
  - python -m pip install -U pip
  - python -m pip install poetry
  - cp -rn example/checks test/int_test/mysql
  - cp -rn example/load_data test/int_test/mysql
  - cp -rn example/run_sql test/int_test/mysql
  - cp -rn example/lookups test/int_test/mysql
  - cp -rn example/fake test/int_test/mysql
  - poetry install -E mysql
  - cd test/int_test/mysql
  - poetry run data_check ping --wait --timeout 60 --retry 5
  - rm -f checks/pipelines/fake_data/main.simple_fake_table.csv
  - rm -f checks/pipelines/fake_data/main.simple_fake_table_2.csv
  - rm -f checks/generated/data_with_hash.csv
  - rm -f test.db
  - poetry run data_check sql --workers 1 --files prepare
  - poetry run pytest ../test_int_tests.py
  - poetry run pytest ../../../test/database
  environment:
    DB_CONNECTION:
      from_secret: MYSQL_CONNECTION
    DB_PASSWORD:
      from_secret: MYSQL_PASSWORD
    DB_USER:
      from_secret: MYSQL_USER
  image: python:3.8
  name: data_check
  pull: if-not-exists
  volumes:
  - name: cache
    path: /root/.cache
  - name: pkg_cache
    path: /var/cache/apt
type: docker
volumes:
- host:
    path: /tmp/data_check_cache/mysql
  name: cache
- host:
    path: /tmp/data_check_cache/mysql_pkg
  name: pkg_cache
---
kind: pipeline
name: postgres
platform:
  arch: arm64
  os: linux
steps:
- commands:
  - python -m pip install -U pip
  - python -m pip install poetry
  - cp -rn example/checks test/int_test/postgres
  - cp -rn example/load_data test/int_test/postgres
  - cp -rn example/run_sql test/int_test/postgres
  - cp -rn example/lookups test/int_test/postgres
  - cp -rn example/fake test/int_test/postgres
  - poetry install -E postgres
  - cd test/int_test/postgres
  - poetry run data_check ping --wait --timeout 60 --retry 5
  - rm -f checks/pipelines/fake_data/main.simple_fake_table.csv
  - rm -f checks/pipelines/fake_data/main.simple_fake_table_2.csv
  - rm -f checks/generated/data_with_hash.csv
  - rm -f test.db
  - poetry run data_check sql --workers 1 --files prepare
  - poetry run pytest ../test_int_tests.py
  - poetry run pytest ../../../test/database
  environment:
    DB_CONNECTION:
      from_secret: POSTGRES_CONNECTION
    DB_PASSWORD:
      from_secret: POSTGRES_PASSWORD
    DB_USER:
      from_secret: POSTGRES_USER
  image: python:3.8
  name: data_check
  pull: if-not-exists
  volumes:
  - name: cache
    path: /root/.cache
  - name: pkg_cache
    path: /var/cache/apt
type: docker
volumes:
- host:
    path: /tmp/data_check_cache/postgres
  name: cache
- host:
    path: /tmp/data_check_cache/postgres_pkg
  name: pkg_cache
---
kind: pipeline
name: mssql
platform:
  arch: arm64
  os: linux
steps:
- commands:
  - python -m pip install -U pip
  - python -m pip install poetry
  - curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
  - curl https://packages.microsoft.com/config/debian/11/prod.list > /etc/apt/sources.list.d/mssql-release.list
  - rm /etc/apt/apt.conf.d/docker-clean
  - apt-get update
  - apt-get install -y unixodbc unixodbc-dev python3.9-dev
  - ACCEPT_EULA=Y apt-get install -y msodbcsql18
  - cp -rn example/checks test/int_test/mssql
  - cp -rn example/load_data test/int_test/mssql
  - cp -rn example/run_sql test/int_test/mssql
  - cp -rn example/lookups test/int_test/mssql
  - cp -rn example/fake test/int_test/mssql
  - poetry install -E mssql
  - cd test/int_test/mssql
  - poetry run data_check ping --wait --timeout 60 --retry 5
  - rm -f checks/pipelines/fake_data/main.simple_fake_table.csv
  - rm -f checks/pipelines/fake_data/main.simple_fake_table_2.csv
  - rm -f checks/generated/data_with_hash.csv
  - rm -f test.db
  - poetry run data_check sql --workers 1 --files prepare
  - poetry run pytest ../test_int_tests.py
  - poetry run pytest ../../../test/database
  environment:
    DB_CONNECTION:
      from_secret: MSSQL_CONNECTION
    DB_PASSWORD:
      from_secret: MSSQL_PASSWORD
    DB_USER:
      from_secret: MSSQL_USER
  image: python:3.9
  name: data_check
  pull: if-not-exists
  volumes:
  - name: cache
    path: /root/.cache
  - name: pkg_cache
    path: /var/cache/apt
type: docker
volumes:
- host:
    path: /tmp/data_check_cache/mssql
  name: cache
- host:
    path: /tmp/data_check_cache/mssql_pkg
  name: pkg_cache
