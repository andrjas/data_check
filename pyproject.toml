[tool.poetry]
name = "data_check"
version = "0.18.0"
description = "simple data validation"
authors = ["Andreas Rjasanow <andrjas@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://andrjas.github.io/data_check/"
repository = "https://github.com/andrjas/data_check"
keywords = ["data", "validation", "testing", "quality"]
classifiers = [
        "Development Status :: 3 - Alpha",
        "Environment :: Console",
        "Intended Audience :: Developers",
        "Intended Audience :: Other Audience",
        "Intended Audience :: Science/Research",
        "Topic :: Database",
        "Topic :: Software Development",
        "Topic :: Software Development :: Testing",
    ]
include = ["CHANGELOG.md", "LICENSE"]

[tool.poetry.dependencies]
python = "^3.9,<3.12"
SQLAlchemy = "^2.0.19"
pandas = "^2.0.3"
pyyaml = "^6.0"
numpy = "^1.24.4"
click = "^8.1.5"
colorama = "^0.4.6"
Jinja2 = "^3.1.2"
python-dateutil = "^2.8.2"
openpyxl = "^3.1.2"
click-default-group = "^1.2.2"
Faker = "^20.1.0"
pydantic = "^2"

psycopg2-binary = { version = "^2.9.6", optional = true }
cx_Oracle = { version = "^8.3.0", optional = true}
oracledb = { version = "^1.3.2", optional = true}
pymysql = {version = "^1.1.0", optional = true, extras = ["rsa"] }
pyodbc = {version = "^5", optional = true}
duckdb-engine = {version = "^0.9.1", optional = true}
databricks-sql-connector = { version = "^3.0.0", optional = true, extras = ["sqlalchemy"] }

[tool.poetry.dev-dependencies]
pytest = "^7"
pytest-parallel = "^0.1.0"
coverage = "^7"

[tool.poetry.scripts]
data_check = "data_check.cli.main:cli"

[tool.poetry.extras]
postgres = ["psycopg2-binary"]
oracle = ["cx_Oracle"]
oracledb = ["oracledb"]
mysql = ["pymysql"]
mssql = ["pyodbc"]
duckdb = ["duckdb-engine"]
databricks = ["databricks-sql-connector"]

[tool.poetry.group.dev.dependencies]
mypy = "^1.4.1"
types-pyyaml = "^6.0.12.10"
pandas-stubs = "^2.0.2.230605"
types-colorama = "^0.4.15.11"
types-python-dateutil = "^2.8.19.13"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
filterwarnings = [
    "error",
    "ignore::FutureWarning",
]

[tool.vulture]
paths = ["data_check", ".vulture_whitelist.py"]

[tool.mypy]
files = ["data_check/", "test/"]
